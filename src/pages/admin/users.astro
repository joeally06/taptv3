---
import Layout from '../../layouts/Layout.astro';
import AdminNav from '../../components/AdminNav.astro';
import { createClient } from '@supabase/supabase-js';

// Create Supabase client
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Check if user is authenticated and is admin
const user = Astro.cookies.get('user')?.json();

if (!user || user.role !== 'admin') {
  return Astro.redirect('/login');
}

// Get all users
const { data: users, error } = await supabase
  .from('users')
  .select('id, role, created_at')
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching users:', error);
  return Astro.redirect('/500');
}
---

<Layout title="User Management">
  <AdminNav currentPath="/admin/users" />
  
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold text-gray-900">User Management</h1>
      <button
        id="add-user"
        class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"
      >
        Add User
      </button>
    </div>
    
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created At</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {users.map(user => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.id}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.role}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {new Date(user.created_at).toLocaleDateString()}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <button
                  class="text-primary-600 hover:text-primary-900 mr-3"
                  data-action="edit"
                  data-user={JSON.stringify(user)}
                >
                  Edit
                </button>
                <button
                  class="text-red-600 hover:text-red-900"
                  data-action="delete"
                  data-user-id={user.id}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Add/Edit User Modal -->
  <div id="user-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
    <div class="bg-white rounded-lg p-8 max-w-md w-full">
      <h2 id="modal-title" class="text-xl font-bold mb-4">Add User</h2>
      
      <form id="user-form" class="space-y-4">
        <input type="hidden" name="userId" />
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
          <select name="role" required class="w-full px-3 py-2 border border-gray-300 rounded-md">
            <option value="user">User</option>
            <option value="admin">Admin</option>
          </select>
        </div>
        
        <div class="flex justify-end space-x-3 mt-6">
          <button
            type="button"
            id="cancel-modal"
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { createClient } from '@supabase/supabase-js';
  const modal = document.getElementById('user-modal');
  const form = document.getElementById('user-form') as HTMLFormElement;
  const modalTitle = document.getElementById('modal-title');
  const addUserBtn = document.getElementById('add-user');
  const cancelBtn = document.getElementById('cancel-modal');

  function showModal(title: string) {
    if (modal && modalTitle) {
      modal.classList.remove('hidden');
      modalTitle.textContent = title;
    }
  }

  function hideModal() {
    if (modal && form) {
      modal.classList.add('hidden');
      form.reset();
    }
  }

  addUserBtn?.addEventListener('click', () => {
    showModal('Add User');
  });

  cancelBtn?.addEventListener('click', hideModal);

  // Close modal when clicking outside
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      hideModal();
    }
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const userId = formData.get('userId')?.toString();
    const role = formData.get('role')?.toString();

    if (!role) return;

    try {
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
      const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
      const supabase = createClient(supabaseUrl, supabaseKey);

      if (userId) {
        // Update existing user
        const { error } = await supabase
          .from('users')
          .update({ role })
          .eq('id', userId);

        if (error) throw error;
      }

      hideModal();
      window.location.reload();
    } catch (error) {
      console.error('Error saving user:', error);
      alert('Failed to save user. Please try again.');
    }
  });

  // Handle edit button clicks
  document.querySelectorAll('[data-action="edit"]').forEach(button => {
    button.addEventListener('click', () => {
      const userData = JSON.parse((button as HTMLElement).dataset.user || '{}');
      
      if (form) {
        const userIdInput = form.querySelector('[name="userId"]') as HTMLInputElement;
        const roleInput = form.querySelector('[name="role"]') as HTMLSelectElement;

        if (userIdInput) userIdInput.value = userData.id;
        if (roleInput) roleInput.value = userData.role;

        showModal('Edit User');
      }
    });
  });

  // Handle delete button clicks
  document.querySelectorAll('[data-action="delete"]').forEach(button => {
    button.addEventListener('click', async () => {
      const userId = (button as HTMLElement).dataset.userId;
      if (!userId) return;

      if (confirm('Are you sure you want to delete this user?')) {
        try {
          const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
          const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
          const supabase = createClient(supabaseUrl, supabaseKey);

          const { error } = await supabase
            .from('users')
            .delete()
            .eq('id', userId);

          if (error) throw error;
          
          window.location.reload();
        } catch (error) {
          console.error('Error deleting user:', error);
          alert('Failed to delete user. Please try again.');
        }
      }
    });
  });
</script>