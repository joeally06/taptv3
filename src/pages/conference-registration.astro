---
import Layout from '../layouts/Layout.astro';
import { getLatestConference } from '../lib/db';

let conference = null;
let error = null;

try {
  conference = await getLatestConference();
  if (!conference) {
    error = 'No upcoming conference is currently available';
  }
} catch (e) {
  error = e instanceof Error ? e.message : 'Failed to load conference data';
}

const states = [
  { value: 'AL', label: 'Alabama' },
  { value: 'AK', label: 'Alaska' },
  { value: 'AZ', label: 'Arizona' },
  { value: 'AR', label: 'Arkansas' },
  { value: 'CA', label: 'California' },
  { value: 'CO', label: 'Colorado' },
  { value: 'CT', label: 'Connecticut' },
  { value: 'DE', label: 'Delaware' },
  { value: 'FL', label: 'Florida' },
  { value: 'GA', label: 'Georgia' },
  { value: 'HI', label: 'Hawaii' },
  { value: 'ID', label: 'Idaho' },
  { value: 'IL', label: 'Illinois' },
  { value: 'IN', label: 'Indiana' },
  { value: 'IA', label: 'Iowa' },
  { value: 'KS', label: 'Kansas' },
  { value: 'KY', label: 'Kentucky' },
  { value: 'LA', label: 'Louisiana' },
  { value: 'ME', label: 'Maine' },
  { value: 'MD', label: 'Maryland' },
  { value: 'MA', label: 'Massachusetts' },
  { value: 'MI', label: 'Michigan' },
  { value: 'MN', label: 'Minnesota' },
  { value: 'MS', label: 'Mississippi' },
  { value: 'MO', label: 'Missouri' },
  { value: 'MT', label: 'Montana' },
  { value: 'NE', label: 'Nebraska' },
  { value: 'NV', label: 'Nevada' },
  { value: 'NH', label: 'New Hampshire' },
  { value: 'NJ', label: 'New Jersey' },
  { value: 'NM', label: 'New Mexico' },
  { value: 'NY', label: 'New York' },
  { value: 'NC', label: 'North Carolina' },
  { value: 'ND', label: 'North Dakota' },
  { value: 'OH', label: 'Ohio' },
  { value: 'OK', label: 'Oklahoma' },
  { value: 'OR', label: 'Oregon' },
  { value: 'PA', label: 'Pennsylvania' },
  { value: 'RI', label: 'Rhode Island' },
  { value: 'SC', label: 'South Carolina' },
  { value: 'SD', label: 'South Dakota' },
  { value: 'TN', label: 'Tennessee' },
  { value: 'TX', label: 'Texas' },
  { value: 'UT', label: 'Utah' },
  { value: 'VT', label: 'Vermont' },
  { value: 'VA', label: 'Virginia' },
  { value: 'WA', label: 'Washington' },
  { value: 'WV', label: 'West Virginia' },
  { value: 'WI', label: 'Wisconsin' },
  { value: 'WY', label: 'Wyoming' }
];
---

<Layout title="Conference Registration">
  <div class="min-h-screen py-12 bg-gray-50">
    <div class="container mx-auto px-4">
      <div class="max-w-3xl mx-auto">
        <div class="bg-white rounded-lg shadow-md p-8">
          {error ? (
            <div class="text-center py-8">
              <h1 class="text-2xl font-bold text-red-600 mb-4">Conference Not Available</h1>
              <p class="text-gray-600">{error}</p>
              <p class="mt-4">Please check back later for upcoming conferences.</p>
            </div>
          ) : conference ? (
            <>
              <h1 class="text-3xl font-bold text-primary-800 mb-6 text-center">TAPT Conference Registration</h1>
              
              <div class="mb-8">
                <h2 class="text-2xl font-semibold mb-4">{conference.name}</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  <div>
                    <p class="text-gray-600">Date</p>
                    <p class="font-medium">{new Date(conference.start_date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })} - {new Date(conference.end_date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
                  </div>
                  <div>
                    <p class="text-gray-600">Location</p>
                    <p class="font-medium">{conference.location}</p>
                  </div>
                  <div>
                    <p class="text-gray-600">Registration Fee</p>
                    <p class="font-medium">$175.00 per attendee</p>
                  </div>
                </div>
              </div>

              <div id="error-message" class="hidden mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded"></div>

              <form id="registration-form" class="space-y-6" data-conference={JSON.stringify(conference)}>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">School District or Company *</label>
                  <input
                    type="text"
                    name="organization"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                  />
                </div>

                <div id="attendees-container">
                  {[1, 2, 3, 4].map((num) => (
                    <div class="attendee-section border-t pt-6 first:border-t-0 first:pt-0 hidden" data-attendee={num}>
                      <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium">Attendee {num} {num === 1 ? '*' : ''}</h3>
                        {num > 1 && (
                          <button type="button" class="remove-attendee text-red-600 hover:text-red-800 text-sm">
                            Remove
                          </button>
                        )}
                      </div>
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                          <input
                            type="text"
                            name={`attendee${num}FirstName`}
                            required={num === 1}
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                          />
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                          <input
                            type="text"
                            name={`attendee${num}LastName`}
                            required={num === 1}
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                          />
                        </div>
                      </div>
                      {num > 1 && (
                        <div class="mt-4">
                          <label class="inline-flex items-center">
                            <input
                              type="checkbox"
                              class="form-checkbox text-primary-600 h-4 w-4"
                              data-same-address={num}
                            />
                            <span class="ml-2 text-sm text-gray-700">Same address as Attendee 1</span>
                          </label>
                        </div>
                      )}
                      <div class="address-fields">
                        <div class="mt-4">
                          <label class="block text-sm font-medium text-gray-700 mb-2">Address</label>
                          <input
                            type="text"
                            name={`attendee${num}Address`}
                            required={num === 1}
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                            placeholder="Street Address"
                          />
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                          <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
                            <input
                              type="text"
                              name={`attendee${num}City`}
                              required={num === 1}
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                            />
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">State</label>
                            <select
                              name={`attendee${num}State`}
                              required={num === 1}
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                            >
                              {states.map(state => (
                                <option value={state.value} selected={state.value === 'TN'}>{state.label}</option>
                              ))}
                            </select>
                          </div>
                          <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">ZIP Code</label>
                            <input
                              type="text"
                              name={`attendee${num}Zip`}
                              required={num === 1}
                              pattern="[0-9]{5}"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                            />
                          </div>
                        </div>
                      </div>
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                          <input
                            type="email"
                            name={`attendee${num}Email`}
                            required={num === 1}
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                          />
                        </div>
                        <div>
                          <label class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                          <input
                            type="tel"
                            name={`attendee${num}Phone`}
                            required={num === 1}
                            pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}"
                            placeholder="123-456-7890"
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                            maxlength="12"
                            oninput="formatPhoneNumber(this)"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                <div class="flex justify-between items-center">
                  <button
                    type="button"
                    id="add-attendee"
                    class="text-primary-600 hover:text-primary-800 text-sm font-medium"
                  >
                    + Add Attendee
                  </button>
                  <div class="text-sm text-gray-600">
                    Total Attendees: <span id="attendee-count">0</span>
                  </div>
                </div>

                <div id="total-amount-section" class="hidden">
                  <div class="bg-gray-50 p-4 rounded-md">
                    <div class="flex justify-between items-center">
                      <span class="text-gray-700">Registration Fee (per attendee):</span>
                      <span class="font-medium">$175.00</span>
                    </div>
                    <div class="flex justify-between items-center mt-2 text-lg font-bold text-primary-700">
                      <span>Total Amount:</span>
                      <span>$<span id="total-amount">0.00</span></span>
                    </div>
                  </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-md">
                  <p class="text-sm text-gray-600">
                    Please mail the completed form and payment check to:<br>
                    TAPT P.O. BOX 68<br>
                    MCMINNVILLE, TN 37111
                  </p>
                  <p class="text-sm text-gray-600 mt-2">
                    For credit card payments, visit:<br>
                    <a href="https://www.paypal.com/ncp/payment/2TB7GLXUJXRXW" class="text-primary-600 hover:text-primary-800" target="_blank" rel="noopener">
                      PayPal Payment Link
                    </a>
                  </p>
                </div>

                <div class="flex gap-4">
                  <button
                    type="submit"
                    class="flex-1 bg-primary-600 text-white py-3 px-6 rounded-md hover:bg-primary-700 transition-colors font-medium"
                  >
                    Submit Registration
                  </button>
                  <button
                    type="button"
                    id="print-form"
                    class="bg-gray-600 text-white py-3 px-6 rounded-md hover:bg-gray-700 transition-colors font-medium"
                  >
                    Print Form
                  </button>
                </div>
              </form>

              <!-- Print Template (hidden by default) -->
              <div id="print-template" class="hidden">
                <div class="print-content">
                  <style>
                    @media print {
                      .print-content {
                        padding: 20px;
                      }
                      .print-header {
                        text-align: center;
                        margin-bottom: 30px;
                      }
                      .print-attendee {
                        margin-bottom: 30px;
                        page-break-inside: avoid;
                      }
                      .print-field {
                        margin-bottom: 10px;
                      }
                      .print-total {
                        margin-top: 30px;
                        border-top: 2px solid #000;
                        padding-top: 10px;
                      }
                    }
                  </style>
                  <div class="print-header">
                    <h1 style="font-size: 24px; font-weight: bold;">TAPT Conference Registration</h1>
                    <p>{conference.name}</p>
                    <p>{new Date(conference.start_date).toLocaleDateString()} - {new Date(conference.end_date).toLocaleDateString()}</p>
                    <p>{conference.location}</p>
                  </div>
                  <div id="print-attendees"></div>
                  <div class="print-total">
                    <p>Total Attendees: <span id="print-attendee-count"></span></p>
                    <p>Total Amount: $<span id="print-total-amount"></span></p>
                  </div>
                </div>
              </div>
            </>
          ) : (
            <div class="text-center py-8">
              <h1 class="text-2xl font-bold text-gray-600 mb-4">No Conference Available</h1>
              <p class="text-gray-600">There are no upcoming conferences at this time.</p>
              <p class="mt-4">Please check back later for upcoming conferences.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</Layout>

<script is:inline>
  function formatPhoneNumber(input) {
    let value = input.value.replace(/\D/g, '');
    if (value.length > 0) {
      if (value.length <= 3) {
        input.value = value;
      } else if (value.length <= 6) {
        input.value = value.slice(0, 3) + '-' + value.slice(3);
      } else {
        input.value = value.slice(0, 3) + '-' + value.slice(3, 6) + '-' + value.slice(6, 10);
      }
    }
  }
</script>

<script>
  const form = document.getElementById('registration-form') as HTMLFormElement;
  const addAttendeeBtn = document.getElementById('add-attendee');
  const attendeeCountSpan = document.getElementById('attendee-count');
  const totalAmountSection = document.getElementById('total-amount-section');
  const totalAmountSpan = document.getElementById('total-amount');
  const errorMessageDiv = document.getElementById('error-message');
  const PRICE_PER_ATTENDEE = 175;
  const MAX_ATTENDEES = 4;

  function showError(message: string) {
    if (errorMessageDiv) {
      errorMessageDiv.textContent = message;
      errorMessageDiv.classList.remove('hidden');
      errorMessageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }

  function hideError() {
    if (errorMessageDiv) {
      errorMessageDiv.classList.add('hidden');
    }
  }

  function resetFormAfterDuplicate(organization: string) {
    // Keep organization value
    const orgInput = form?.querySelector('[name="organization"]') as HTMLInputElement;
    if (orgInput) {
      orgInput.value = organization;
    }

    // Hide all attendee sections except the first one
    const attendeeSections = Array.from(document.querySelectorAll('.attendee-section'));
    attendeeSections.forEach((section, index) => {
      if (index === 0) {
        section.classList.remove('hidden');
        // Clear first attendee's fields
        const inputs = section.querySelectorAll('input, select');
        inputs.forEach(input => {
          const inputElem = input as HTMLInputElement | HTMLSelectElement;
          inputElem.value = inputElem.name.includes('State') ? 'TN' : '';
          inputElem.disabled = false;
          inputElem.required = true;
        });
      } else {
        section.classList.add('hidden');
        // Clear and reset other attendees
        const inputs = section.querySelectorAll('input, select');
        inputs.forEach(input => {
          const inputElem = input as HTMLInputElement | HTMLSelectElement;
          inputElem.value = inputElem.name.includes('State') ? 'TN' : '';
          inputElem.disabled = false;
          inputElem.required = false;
        });
      }
    });

    // Update UI elements
    updateTotalAmount(1);
    if (addAttendeeBtn) {
      addAttendeeBtn.disabled = false;
    }
  }

  function updateTotalAmount(attendeeCount: number) {
    const total = attendeeCount * PRICE_PER_ATTENDEE;
    if (totalAmountSpan) {
      totalAmountSpan.textContent = total.toFixed(2);
    }
    if (attendeeCountSpan) {
      attendeeCountSpan.textContent = attendeeCount.toString();
    }
    if (addAttendeeBtn) {
      addAttendeeBtn.disabled = attendeeCount >= MAX_ATTENDEES;
    }
    if (totalAmountSection) {
      if (attendeeCount > 0) {
        totalAmountSection.classList.remove('hidden');
      } else {
        totalAmountSection.classList.add('hidden');
      }
    }
  }

  function getVisibleAttendeeCount() {
    return document.querySelectorAll('.attendee-section:not(.hidden)').length;
  }

  function getVisibleAttendeeSections() {
    return Array.from(document.querySelectorAll('.attendee-section:not(.hidden)'));
  }

  function copyAddressFromFirstAttendee(targetNum: number) {
    const fields = ['Address', 'City', 'State', 'Zip'];
    fields.forEach(field => {
      const sourceInput = form?.querySelector(`[name="attendee1${field}"]`) as HTMLInputElement | HTMLSelectElement;
      const targetInput = form?.querySelector(`[name="attendee${targetNum}${field}"]`) as HTMLInputElement | HTMLSelectElement;
      if (sourceInput && targetInput) {
        targetInput.value = sourceInput.value;
        targetInput.disabled = true;
      }
    });
  }

  function resetAddressFields(targetNum: number) {
    const fields = ['Address', 'City', 'State', 'Zip'];
    fields.forEach(field => {
      const input = form?.querySelector(`[name="attendee${targetNum}${field}"]`) as HTMLInputElement | HTMLSelectElement;
      if (input) {
        input.value = field === 'State' ? 'TN' : '';
        input.disabled = false;
      }
    });
  }

  function collectAttendeeData(section: Element): Record<string, string> | null {
    const attendeeNum = section.getAttribute('data-attendee');
    if (!attendeeNum) return null;

    const fields = ['FirstName', 'LastName', 'Address', 'City', 'State', 'Zip', 'Email', 'Phone'];
    const data: Record<string, string> = {};

    for (const field of fields) {
      const input = section.querySelector(`[name="attendee${attendeeNum}${field}"]`) as HTMLInputElement | HTMLSelectElement;
      if (!input || !input.value.trim()) {
        return null;
      }
      // Convert to camelCase key (e.g., FirstName -> firstName)
      const key = field.charAt(0).toLowerCase() + field.slice(1);
      data[key] = input.value.trim();
    }
    
    return data;
  }

  function printForm() {
    const printTemplate = document.getElementById('print-template');
    const printAttendeesContainer = document.getElementById('print-attendees');
    const printAttendeeCount = document.getElementById('print-attendee-count');
    const printTotalAmount = document.getElementById('print-total-amount');
    const organization = (form?.querySelector('[name="organization"]') as HTMLInputElement)?.value;
    const visibleSections = getVisibleAttendeeSections();
    
    if (printAttendeesContainer) {
      printAttendeesContainer.innerHTML = '';
      
      // Add organization
      const orgDiv = document.createElement('div');
      orgDiv.className = 'print-field';
      orgDiv.innerHTML = `<strong>Organization:</strong> ${organization}`;
      printAttendeesContainer.appendChild(orgDiv);

      // Add attendees
      visibleSections.forEach((section, index) => {
        const attendeeData = collectAttendeeData(section);
        if (!attendeeData) return;

        const attendeeDiv = document.createElement('div');
        attendeeDiv.className = 'print-attendee';
        attendeeDiv.innerHTML = `
          <h2 style="font-size: 18px; font-weight: bold; margin-bottom: 10px;">Attendee ${index + 1}</h2>
          <div class="print-field"><strong>Name:</strong> ${attendeeData.firstName} ${attendeeData.lastName}</div>
          <div class="print-field"><strong>Address:</strong> ${attendeeData.address}</div>
          <div class="print-field"><strong>City:</strong> ${attendeeData.city}</div>
          <div class="print-field"><strong>State:</strong> ${attendeeData.state}</div>
          <div class="print-field"><strong>ZIP:</strong> ${attendeeData.zip}</div>
          <div class="print-field"><strong>Email:</strong> ${attendeeData.email}</div>
          <div class="print-field"><strong>Phone:</strong> ${attendeeData.phone}</div>
        `;
        printAttendeesContainer.appendChild(attendeeDiv);
      });
    }

    if (printAttendeeCount) {
      printAttendeeCount.textContent = visibleSections.length.toString();
    }

    if (printTotalAmount) {
      printTotalAmount.textContent = (visibleSections.length * PRICE_PER_ATTENDEE).toFixed(2);
    }

    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    if (printWindow && printTemplate) {
      printWindow.document.write(printTemplate.innerHTML);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
      printWindow.close();
    }
  }

  // Handle same address checkboxes
  document.querySelectorAll('[data-same-address]').forEach(checkbox => {
    checkbox.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      const attendeeNum = target.getAttribute('data-same-address');
      if (attendeeNum) {
        const addressFields = target.closest('.attendee-section')?.querySelector('.address-fields');
        if (target.checked) {
          copyAddressFromFirstAttendee(parseInt(attendeeNum));
          if (addressFields) addressFields.classList.add('opacity-50');
        } else {
          resetAddressFields(parseInt(attendeeNum));
          if (addressFields) addressFields.classList.remove('opacity-50');
        }
      }
    });
  });

  // Add print button event listener
  document.getElementById('print-form')?.addEventListener('click', printForm);

  // Show first attendee section by default
  const firstAttendeeSection = document.querySelector('.attendee-section');
  if (firstAttendeeSection) {
    firstAttendeeSection.classList.remove('hidden');
    updateTotalAmount(1);
  }

  // Handle removing attendees
  document.querySelectorAll('.remove-attendee').forEach(button => {
    button.addEventListener('click', () => {
      const section = button.closest('.attendee-section');
      if (section) {
        section.classList.add('hidden');
        const inputs = section.querySelectorAll('input, select');
        inputs.forEach(input => {
          (input as HTMLInputElement).value = '';
          input.required = false;
          input.disabled = false;
        });
        updateTotalAmount(getVisibleAttendeeCount());
      }
    });
  });

  // Handle adding attendees
  addAttendeeBtn?.addEventListener('click', () => {
    const hiddenSections = document.querySelectorAll('.attendee-section.hidden');
    if (hiddenSections.length > 0) {
      hiddenSections[0].classList.remove('hidden');
      const inputs = hiddenSections[0].querySelectorAll('input, select');
      inputs.forEach(input => input.required = true);
      updateTotalAmount(getVisibleAttendeeCount());
    }
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError();

    try {
      const organization = (form.querySelector('[name="organization"]') as HTMLInputElement)?.value.trim();
      const visibleSections = getVisibleAttendeeSections();
      
      if (!organization) {
        showError('Organization is required');
        return;
      }

      if (visibleSections.length === 0) {
        showError('Please add at least one attendee');
        return;
      }

      const attendees = [];
      for (const section of visibleSections) {
        const attendeeData = collectAttendeeData(section);
        if (!attendeeData) {
          showError('Please fill in all required fields for each attendee');
          return;
        }
        attendees.push(attendeeData);
      }

      const totalAmount = visibleSections.length * PRICE_PER_ATTENDEE;
      const conferenceData = form.dataset.conference ? JSON.parse(form.dataset.conference) : null;

      if (!conferenceData || !conferenceData.id) {
        throw new Error('Conference data is missing');
      }

      const requestData = {
        organization,
        attendees,
        totalAmount,
        conferenceId: conferenceData.id
      };

      // Debug log to check request data
      console.log('Request data:', requestData);

      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'Submitting...';
      }

      const response = await fetch('/api/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Registration failed');
      }

      window.location.href = '/registration-success';
    } catch (error) {
      console.error('Registration error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Registration failed. Please try again.';
      showError(errorMessage);
      
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = 'Submit Registration';
      }

      // If it's a duplicate registration, reset the form but keep the organization
      if (error instanceof Error && error.message.includes('already registered')) {
        resetFormAfterDuplicate(form.querySelector('[name="organization"]')?.value || '');
      }
    }
  });
</script>